//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

package libncs_omnet;

import libncs_omnet.NcsContext;


simple CoCpnNcsContext extends NcsContext like INcsContext
{
    parameters:
        @class(CoCpnNcsContext);

        //
        // CoCPNNcsContext configuration
        //
        
        ncsImpl = default("libncs_omnet.MatlabImpl.CoCpnMatlabNcsImpl");
		
		// Size of C->A payload (used to compute data rate)
		int payloadSize @unit(Byte) = default(344B);
		// Autodetect payload size. This overrides the manually configured payload size
		bool autoPayloadSize = default(true);
		
        // provide live delay probabilites sampled at runtime to NcsImpl?
        bool useSampledDelayProbs = default(false);

        // Translator mapping function QM<->QoC
        // provides linear subrange mapping, toQM = (inQoC - offset) * factor
        double factor = default(1.0 / (1.0 - offset));
        double offset = default(0.0);

        //
        // CoCPNNcsImpl configuration
        //
        // default values are configured to "do not set/change defaults"
        //

        // Since the NCS model depends on the sampling interval, it is most
        // likely suboptimal to change the samplig interval by using the
        // OMNeT simulation configuration, but instead by choosing an accordingly
        // configured .mat file. Unless you hook the MATLAB interface to 
        // re-compute the NCS model according to the new value.
        double samplingInterval = default(-1);
        
        // delay probability distribution for S->C communication
        // (list of space-separated double values)
        volatile string scDelayProbs = default("");
        // delay probability distribution for C->A communication
        // (list of space-separated double values)
        volatile string caDelayProbs = default("");
        
        // enables the event-based operation mode of the controller
        // boolean, 0 = off, >0 on, -1: default of loaded configuration
        int controllerEventBased = default(-1); 
        // configures the event trigger used by the controller, if operating in event-based mode
        // 1: QoC, 2: stage costs, 3: inputs only (default), -1: default of loaded configuration
        int controllerEventTrigger = default(-1); 
        // configures the deadband threshold used for event-based controller operation mode
        // -1: default of loaded configuration
        volatile double controllerDeadband = default(-1);
        
        // enables the event-based operation mode of the sensor
        // boolean, 0 = off, >0 on, -1: default of loaded configuration
        int sensorEventBased = default(-1); 
        // configures the threshold parameters used for event-based sensor operation mode
        // -1: default of loaded configuration
        volatile double sensorMeasDelta = default(-1);
               
        // Absolute or relative path to a file (mat file) defining a NcsTranslator object
        // empty string: read NcsTranslator from configuration
        string translatorFile = default("");
        
        //
        // Signals and statistics
        //

        // Generated in OMNeT
        
        @signal[reportedQoC](type="double"); // the QoC value reported by the controller
        @signal[reportedQM](type="double"); // the QM corresponding to the controllers QoC
        @signal[targetQoC](type="double");
        @signal[targetQM](type="double");
        @signal[sPayloadSize](type="long");
        
        @statistic[reported_QoC](source=reportedQoC;title="Reported QoC";record=stats?,vector?;interpolationmode=sample-hold);
        @statistic[reported_QM](source=reportedQM;title="Reported QM";record=stats?,vector?;interpolationmode=sample-hold);
        @statistic[ctrlTargetQoC](source=targetQoC;title="Control target QoC";record=stats?,vector?;interpolationmode=sample-hold);
        @statistic[ctrlTargetQM](source=targetQM;title="Control target QM";record=stats?,vector?;interpolationmode=sample-hold);
        @statistic[payloadSize](source=sPayloadSize;title="Payload Size";record=stats?,vector?;interpolationmode=sample-hold);
        
        // Generated by CoCPNNcsImpl

        // none, yet
}
